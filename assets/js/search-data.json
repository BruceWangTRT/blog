{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://brucewangtrt.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Logging 02 Flow",
            "content": "Python Logging 02 Flow . Still remember this flow chart? . Now that we know those concepts, we can dig into the details and start to understand the dynamics. . logger flow . Everything starts from logger methods like log(), info(), warning(), etc. . import logging logger = logging.getLogger(&quot;some_name&quot;) logger.warning(&quot;some message&quot;) . Few things will happen in this order: . Python Logging 02 Flow check if requested severity level is enabled | create an instance of LogRecord if enabled | check the LogRecord instance against filters | invoke handlers of logger instance check severity level again | filter again | format | emit | | propagate if configured | | check if requested severity level is enabled . This is done by checking first the module-level level set by logging.disable(level) and then the logger’s effective level. . The logger hierarchy is traversed towards the root logger until a value other than NOTSET is found or reached the root logger whose effective level is always set to WARNING. . In case of no disable settings, if the requested severity level is greater than or equal to the logger’s effective level, the request will proceed. Nothng happens otherwise. . create an instance of LogRecord if enabled . An instance of LogRecord(the record) is created at this stage with all the information it gathers at the point of creation, including severity level, logging message string, name of the logger, the full pathname of the source file where the logging call was issued (if available), etc. The record is all the rest of the flow can see. In other words, it is the sole source of information for filters, handlers and formatters. . check the LogRecord instance against filters . Apply this logger’s filters to the record and return True if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be processed (passed to handlers). If one returns a false value, no further processing of the record occurs. . invoke handlers of logger instance . check severity level again . Why is there another level check? The level set in the logger determines which severity of messages it will pass to its handlers. The level set in each handler determines which messages that handler will send on. . filter again . Similar to serverity level check, filters added to each handler determines which message that handler will send on . format . Formatters can always be configured beforehand. But when to do the formatting is up to the implementation of handlers. . emit . This is the step to do whatever it takes to actually log the specified logging record. The log could be written to a file as a string, or sent over a socket as a Python pickle. The standard library includes quite a few handler types (see Useful Handlers) . propagate if configured . Each logger has an attribute named propagate defaulting to true. If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger. Messages are passed directly to the ancestor loggers’ handlers - neither the level nor filters of the ancestor loggers in question are considered. . If this evaluates to false, logging messages are not passed to the handlers of ancestor loggers. . If you attach a handler to a logger and one or more of its ancestors, it may emit the same record multiple times. In general, you should not need to attach a handler to more than one logger - if you just attach it to the appropriate logger which is highest in the logger hierarchy, then it will see all events logged by all descendant loggers, provided that their propagate setting is left set to True. A common scenario is to attach handlers only to the root logger, and to let propagation take care of the rest. .",
            "url": "https://brucewangtrt.github.io/blog/python/2020/02/01/python-logging-02-flow.html",
            "relUrl": "/python/2020/02/01/python-logging-02-flow.html",
            "date": " • Feb 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Logging 01 Concepts",
            "content": "Python Logging 01 Concepts . We will learn these important concepts: severity level, logger, handler, filter, formatter, LogRecord. . Python Logging 01 Concepts | severity level | logger | LogRecord | handler | filter | formatter | severity level . The standard severity levels and their applicability are described below (in increasing order of severity): . Level | Numeric value | When it’s used | . NOTSET | 0 | N/A | . DEBUG | 10 | Detailed information, typically of interest only when diagnosing problems. | . INFO | 20 | Confirmation that things are working as expected. | . WARNING | 30 | An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected. | . ERROR | 40 | Due to a more serious problem, the software has not been able to perform some function. | . CRITICAL | 50 | A serious error, indicating that the program itself may be unable to continue running. | . . If you define a level with the same numeric value, it overwrites the predefined value; the predefined name is lost. logger . Logging is performed by calling methods on instances of the Logger class (hereafter called loggers). Each logger instance has a name, and they are referred by it. . &gt;&gt;&gt;import logging &gt;&gt;&gt;logger = logging.getLogger(&quot;some_name&quot;) . Loggers names are period-separated hierarchical structures. Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of parent, loggers with names of parent.child and parent.child.pet are all descendants of the logger with the name ofparent. The root logger is the parent of all loggers. And if you did not pass a name when calling getLogger(), a reference to the root logger will be returned. . &gt;&gt;&gt;import logging &gt;&gt;&gt;logging.getLogger() &lt;RootLogger root (WARNING)&gt; &gt;&gt;&gt;logger_parent = logging.getLogger(&quot;parent&quot;) &gt;&gt;&gt;logger_parent.parent &lt;RootLogger root (WARNING)&gt; &gt;&gt;&gt;logger_child = logging.getLogger(&quot;parent.child&quot;) &gt;&gt;&gt;logger_child.parent &lt;Logger parent (WARNING)&gt; . A good convention to use when naming loggers is to use a module-level logger, in each module which uses logging, named as follows: . logger = logging.getLogger(__name__) . Multiple calls to getLogger() with the same name will return a reference to the same logger object. . &gt;&gt;&gt;import logging &gt;&gt;&gt;logger = logging.getLogger(&quot;some_name&quot;) &gt;&gt;&gt;logger_two = logging.getLogger(&quot;some_name&quot;) &gt;&gt;&gt;logger == logger_two True . Loggers have a concept of effective level. If a level is not explicitly set on a logger, the level of its parent is used instead as its effective level. This happens recusively until it reaches the root logger, which always has an explicit level set (WARNING by default). . Read more on Logger here. . LogRecord . Logging messages are encoded as instances of the LogRecord class. When a logger decides to actually log an event, a LogRecord instance is created from the logging message. Log event information is passed between loggers, handlers, filters and formatters in LogRecord instances. . Read more on LogRecord here. . handler . Handler objects are responsible for dispatching the appropriate log messages to the handler’s specified destination. Logger objects can add zero or more handler objects to themselves with an addHandler() method. . import logging # create logger logger = logging.getLogger(&#39;simple_example&#39;) # create console handler ch = logging.StreamHandler() # add ch to logger logger.addHandler(ch) # &#39;application&#39; code logger.error(&#39;error message&#39;) . The standard library includes quite a few handler types (see Useful Handlers) . Read more on Handler here. . filter . Filters can be used by handlers and loggers for more sophisticated filtering than is provided by levels. . Each filter is passed an instance of LogRecord and returns zero for no, nonzero for yes. Any instance which has a filter() method that takes one positional argument can be a filter. . Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they’re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or even in-place modifing the LogRecord being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs. . Read more on Filter here. . formatter . Formatter objects configure the final order, structure, and contents of the log message. . import logging # create logger logger = logging.getLogger(&#39;simple_example&#39;) # create console handler ch = logging.StreamHandler() # create formatter formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;) # add formatter to ch ch.setFormatter(formatter) # add ch to logger logger.addHandler(ch) # &#39;application&#39; code logger.critical(&#39;critical message&#39;) . 2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message . Read more on Formatter here. .",
            "url": "https://brucewangtrt.github.io/blog/python/2020/01/27/python-logging-01-concepts.html",
            "relUrl": "/python/2020/01/27/python-logging-01-concepts.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Logging 00 Introduction",
            "content": "Python logging 00 introduction . There is a logging module in Python standard library. And the Python org has great documemtations about it here. This series of posts are mostly my digest of those docs. . To give you an idea of how it looks like, let’s have a look at an example first: . &gt;&gt;&gt;import logging &gt;&gt;&gt;logger = logging.getLogger(&quot;some_name&quot;) &gt;&gt;&gt;logger.warning(&quot;some message&quot;) some message . Here we import logging module from the standard library, then we get an instance of logger and lastly we log some message at warning level with that logger. . And that is how to log with standard library in its simplest form. . Eventually, you will get to know more about the whole module and can easily understand this flow chart: . We will learn more about that in the next post. .",
            "url": "https://brucewangtrt.github.io/blog/python/2020/01/26/python-logging-00-introduction.html",
            "relUrl": "/python/2020/01/26/python-logging-00-introduction.html",
            "date": " • Jan 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://brucewangtrt.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://brucewangtrt.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}